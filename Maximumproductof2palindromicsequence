//Given a string s, find two disjoint palindromic subsequences of s such that the product of their lengths is maximized.
//The two subsequences are disjoint if they do not both pick a character at the same index.
class Solution {
public:
bool ispalindrome(string&s){
    int n=s.size();
    for(int i=0;i<n/2;i++){
  if(s[i]!=s[n-i-1]){
    return false;
  }
    } 
    return true;
}
int f(string&s,string s1,string s2,int i){
    if(i==s.size()){
        if(ispalindrome(s1)&&ispalindrome(s2)){
            return (s1.size())*(s2.size());
        }
        return 0;
    }
    //notpick
    int nottake=f(s,s1,s2,i+1);
    //pics1
    int take1=f(s,s1+s[i],s2,i+1);
    //pics2
    int take2=f(s,s1,s2+s[i],i+1);
    return max({nottake,take1,take2});
}
    int maxProduct(string s) {
     return f(s,"","",0);   
    }
};
